#!/usr/bin/perl

use strict;

use lib "../lib";
use Database;
use Settings;
use Template;
use Utils;

use CGI qw(-debug :standard);
$CGI::DISABLE_UPLOADS = 1;

use vars qw($cgi $db);

$cgi = new CGI;

$db = Database->new();
$db->connect(Settings::settings("dbName"));


unless(defined($cgi->param("uid1")) && defined($cgi->param("uid2")) &&
   defined($cgi->param("uid3")) && defined($cgi->param("uid4")) &&
       defined($cgi->param("start")) && defined($cgi->param("end"))) {
    print $cgi->header();
    print "//Missing parameter\n";
    exit;
}

my @uids;
foreach my $i (0..3) {
    my $j = $i+1;
    $uids[$i] = $cgi->param("uid$j");
    $uids[$i] = int($uids[$i]);
}

#these are in minutes.
my $start = $cgi->param("start");
my $end = $cgi->param("end");

$start = int($start);
$end = int($end);

if($start < 0 || $start > 1440 || $end < 0 || $end > 1440) {
    print $cgi->header();
    print "//Invalid times\n";
    exit;
}

if($end <= $start) {
    print $cgi->header();
    print "//Start time after end time\n";
    exit;
}

unless(($start % 15 == 0) && ($end % 15 == 0)) {
    print $cgi->header();
    print "//Start or end time doesn't line up\n";
    exit;
}


print $cgi->header();
my @images;

foreach(@uids) {
    my @p = $db->getPhotosBetween($_, toSqlTime($start), toSqlTime($end));

    #print toSqlTime($start);

    #print @p;
    
    my @thisimages;
    foreach(@p) {
	my %photo;
	$db->photoInfo($_, \%photo);
	push(@thisimages, \%photo);
    }

    bucketize(\@thisimages);

    push(@images, \@thisimages);
}

my $js = "";

foreach(@images) {
    my @is = @$_;

    foreach(@is) {

	my @time = Utils::sqlTime($_->{time}, $_->{offset});
	my $tstring = "$time[0]:$time[1]:$time[2]";

	my @photographer = $db->getinfo($_->{uid});
	my $fn = $photographer[0];
	my $ln = $photographer[1];

	my $photogName = lc($fn) . " " . lc($ln);

	my $caption = "";
	$caption = $db->getCaption($_->{phid});
	$caption = Utils::summary($caption, 20);

	my ($width, $height) = Utils::imagesize(Utils::imagePath($_,"medium"));

	$js .= "addPhoto(" . $_->{phid} . ", " . $_->{lookupid} . ", \"" .
	    Utils::imageURL($_,"medium") . "\", " . $width .
	    ", \"$tstring\", \"$photogName\", \"$caption\", \"\"); ";	
    }
}

print $js;
	

sub getPixelOffset {
    my $start = shift;
    my $time = shift;

    
    my @timel = Utils::sqlTime($time, 0);

    my $seconds = $timel[0]*3600 + $timel[1]*60 + $timel[2];

    # num of seconds into this fifteen minute window that we are.
    my $secondsOff = $seconds - ($start * 60);

    my $ticksOff = int($secondsOff / 90);
    
    #20 is width in pixels of tiny thumbnails.
    my $pixOff = $ticksOff * 20;

    return $pixOff;
}

    



sub toSqlTime {
    my $dayminute = shift;

    my $day = Settings::settings("eventDate");
    my $hour = int($dayminute / 60);
    my $minute = $dayminute % 60;
    
    return "$day $hour:$minute:00";
}

sub niceTime {
    my $dayminute = shift;

    my $hour = int($dayminute / 60);
    my $minute = $dayminute % 60;

    return sprintf("%02d:%02d", $hour, $minute);
}


sub bucketize {
    my $listref = shift;

    my %buckets;

    foreach(@$listref) {
	my @time = Utils::sqlTime($_->{time});
	my $mins = $time[0]*60 + $time[1];
	my $bucket = int($mins / 1.5);
	unless(exists($buckets{$bucket})) {
	    $buckets{$bucket} = $_->{phid};
	}
	$_->{lookupid} = $buckets{$bucket};
    }
}
