#!/usr/bin/perl

use strict;

use lib "../lib";
use Database;
use Settings;
use Template;
use Utils;
use Colors;
use Cookie;

use JSON;

use CGI qw(-debug :standard);
$CGI::DISABLE_UPLOADS = 1;

use vars qw($cgi $db);

$db = Database->new();
$db->connect(Settings::settings("dbName"));

$cgi = new CGI;

my $visitoruid = Cookie::isUserLoggedIn($cgi, $db);

my @uids = map { int($_) } split(",", $cgi->param("uid"));

my $start = $cgi->param("start");
if(defined($start)) {
    $start = int($start);
    if($start < 0 || $start > 1439 || !($start % 15 == 0)) {
	$start = 720;
    }
} else {
    $start = 720;
}

my @photographer = $db->getinfo($uids[0]);
my $fn = $photographer[0];
my $ln = $photographer[1];

my $photogName = "$fn $ln";

my @allimages = getPhotos(\@uids);

my @navline = getNavlineContent(@allimages);

my @timeline = getScrollerContent(@allimages);

my $html = Template::fillTemplateNew
  (
   Settings::settings("templateLib") . "/timeline.tmpl",
  {
   navline => \@navline,
   scroller_js => encode_json(\@timeline),

   Photog => $photogName,

   uid => $visitoruid,
  }
  );

print $cgi->header();
print $html;
exit;

sub getPhotos {
  my $uidref = shift;

  my ($start, $end) = (toSqlTime(0), toSqlTime(1439));

  my @allimages;
  foreach (@$uidref) {
    #comes back sorted.
    push @allimages, $db->getPhotoInfoBetween($_, $start, $end);
  }
  return @allimages;
}

sub getScrollerContent {
  my (@allimages) = @_;

  my %bucketized;

  bucketize(\@allimages, \%bucketized, 12);

  my @timeline;

  foreach my $bucket (sort keys %bucketized) {
    my $xoff = $bucket * 380;
    my $even = ($bucket % 2);
    my @photos;
    foreach (@{$bucketized{$bucket}}) {
      my @time = Utils::sqlTime($_->{time});
      my $tstring = "$time[0]:$time[1]:$time[2]";
      delete $_->{"original_path"};

      push @photos,
	{
	 %{$_},
	 image => Utils::imageURL($_, "medium"),
	 time => $tstring,
	};
    }
    push @timeline,
      {
       xoff => $xoff,
       even => $even,
       photos => \@photos,
      };
  }
  return @timeline;
}

sub getNavlineContent {
    my (@allimages) = @_;

    my %bucketized;
    #takes only first image per bucket
    bucketize(\@allimages, \%bucketized, 2);

    my @navline;

    foreach (sort keys %bucketized) {
      $_ = $bucketized{$_}[0];
      my $xoff = getPixelOffset(0, $_->{time});
      my @time = Utils::sqlTime($_->{time});
      my $tstring = "$time[0]:$time[1]:$time[2]";

      push @navline,
	{
	 xoff => $xoff,
	 Image => Utils::imageURL($_, "small"),
	 Time => $tstring,
	};
    }

    return @navline;
}

sub bucketize {
    my $listref = shift;
    my $outref = shift;
    my $minsperbucket = shift;

    foreach(@$listref) {
	my @time = Utils::sqlTime($_->{time});
	my $mins = $time[0]*60 + $time[1];
	my $bucket = int($mins / $minsperbucket);

	push @{$outref->{$bucket}}, $_;
    }
}

sub getPixelOffset {
    my $start = shift;
    my $time = shift;

    
    my @timel = Utils::sqlTime($time, 0);

    my $seconds = $timel[0]*3600 + $timel[1]*60 + $timel[2];

    # num of seconds into this fifteen minute window that we are.
    my $secondsOff = $seconds - ($start * 60);

    my $pixOff = int( ($secondsOff / 86400) * 930);
    
    return $pixOff;
}

sub toSqlTime {
    my $dayminute = shift;

    my $day = Settings::settings("eventDate");
    my $hour = int($dayminute / 60);
    my $minute = $dayminute % 60;
    
    return "$day $hour:$minute:00";
}
