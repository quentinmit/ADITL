#!/usr/bin/perl

use strict;

use lib "../lib";
use Database;
use Settings;
use Template;
use Utils;
use Colors;
use Cookie;

use CGI qw(-debug :standard);
$CGI::DISABLE_UPLOADS = 1;

use vars qw($cgi $db);

$cgi = new CGI;

$db = Database->new();
$db->connect(Settings::settings("dbName"));

print $cgi->header();

my %image;

$db->getRandomFrontPhoto(\%image);

my @photographer = $db->getinfo($image{uid});
my $fn = $photographer[0];
my $ln = $photographer[1];

my $photogName = lc($fn) . " " . lc($ln);
#my $photogName = uc(substr($fn, 0, 1)) . substr($fn, 1) . " " . uc(substr($ln, 0, 1)) . substr($ln, 1);

my ($width, $height) = Utils::imagesize(Utils::imagePath(\%image, "large"));

my @time = Utils::sqlTime($image{time});
my $tstring = "$time[0]:$time[1]:$time[2]";

my $caption = $db->getCaption($image{phid});

my @numphotos = $db->getinfo2($image{uid});



my @color = Colors::grabColor(Utils::imagePath(\%image, "small"));

my $lightness = Settings::settings("colorManipLightness");
my $sat = Settings::settings("colorManipSat");
my @bgColor = Colors::slightGray(@color, $lightness, $sat);

my $wbgcolor = Utils::toWebColor(@bgColor);
my $wcolor = Utils::toWebColor(@color);

my $aditlLeft = 550 - $width;

my $voteURL = Settings::settings("frontURL") . "?vote=" . $image{phid};

my $personURL = Settings::settings("timelineURL") . "?uid1=" . $image{uid};

my @vals = (Settings::settings("urlBase"), Utils::imageURL(\%image, "large"), $tstring, $photogName, $wcolor, $wbgcolor,
	    $aditlLeft, $voteURL, $width - 8, $image{phid}, $numphotos[0], $personURL, $caption);

my $html = Template::fillTemplate(Settings::settings("templateLib") . "/front.html", \@vals);

print $html;
exit;





# Opens an html template and fills in the appropriate photos and text
# The format of the template is a newline separated list of keywords to
# be replaced (order of keywords matching order of replacing text) ending
# with <template> followed by the template body.
# empty lines in keyword list are ignored.
sub fillTemplateee {
    my $templateFile = shift; #file name
    my $objectRef = shift;
    my @objects = @$objectRef;
    # list of text bits to be swapped in for the keywords found in the
    # template.

# The proc just takes objects in order and replaces the variables found
# in the html template in order.

    open(FILE, "$templateFile") or die "Couldn't open template file: $!\n";
    my @temp = <FILE>;
    my $template = join("", @temp);
    close(FILE);
    
    @temp = split(/\<template\>/, $template);

    my $templateBody = $temp[1];
    my @variables1 = split(/\n/, $temp[0]);
    my @variables; #keywords we'll be substituting for in template body

    foreach(@variables1) {
	unless($_ =~ /^\n$$/) {
	    push(@variables, $_);
	}
    }

    if(scalar(@objects) != scalar(@variables)) {
	die "in 'fillTemplate' number of template keywords and replacement text does not match\n";
    }

    for(my $i = 0; $i < scalar(@variables); $i++) {
	$templateBody =~ s/$variables[$i]/$objects[$i]/g;
    }

    return $templateBody;
}

